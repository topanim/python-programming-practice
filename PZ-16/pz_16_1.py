"""
Создайте класс «Книга», который имеет атрибуты название, автор и количество
страниц. Добавьте методы для чтения и записи книги.
"""

class Book:
    """
    Класс для представления книги.

    Имеет атрибуты: title (название), author (автор), num_pages (количество страниц).
    """

    def __init__(self, title, author, num_pages):
        """
        Инициализация объекта Book.

        Args:
            title (str): Название книги.
            author (str): Автор книги.
            num_pages (int): Количество страниц в книге.
        """
        # Проверяем тип данных для количества страниц и что оно положительное
        # Если данные некорректны, вызываем ошибку, т.к. объект не может быть создан правильно
        if not isinstance(num_pages, int) or num_pages <= 0:
            # Сообщение об ошибке при создании объекта - тоже на русском
            raise ValueError("Количество страниц должно быть положительным целым числом.")

        self.title = title
        self.author = author
        self.num_pages = num_pages

    def display_info(self):
        """
        Метод для "чтения" информации о книге (отображения).
        Выводит атрибуты объекта в консоль для пользователя.
        """
        print("\n--- Информация о книге ---") # Сообщение для пользователя на русском
        print(f"Название: {self.title}")
        print(f"Автор: {self.author}")
        print(f"Страниц: {self.num_pages}")
        print("-" * 25)

    def input_data(self):
        """
        Метод для "записи" (ввода/обновления) данных книги с клавиатуры.
        Запрашивает у пользователя название, автора и количество страниц на русском языке.
        """
        print("\n--- Ввод данных для книги ---") # Сообщение для пользователя на русском
        self.title = input("Введите название книги: ") # Запрос на русском
        self.author = input("Введите автора книги: ") # Запрос на русском
        while True: # Цикл для проверки ввода количества страниц
            try:
                pages_str = input("Введите количество страниц: ") # Запрос на русском
                num_pages = int(pages_str)
                if num_pages <= 0:
                     print("Ошибка: Количество страниц должно быть больше нуля.") # Сообщение об ошибке на русском
                else:
                    self.num_pages = num_pages
                    break # Выходим из цикла, если ввод корректен
            except ValueError:
                print("Ошибка: Введите целое число для количества страниц.") # Сообщение об ошибке на русском

# --- Пример использования класса ---
# Этот блок выполняется только при запуске скрипта напрямую
if __name__ == "__main__":
    # Создаем объект книги при инициализации
    try:
        book1 = Book("Мастер и Маргарита", "Булгаков М.А.", 480) # Значения атрибутов могут быть на любом языке

        # Используем метод "чтения"
        book1.display_info()

    except ValueError as e:
        # Обработка ошибки, если не удалось создать книгу (например, некорректное число страниц в конструкторе)
        print(f"Не удалось создать книгу 1: {e}") # Сообщение об ошибке на русском

    print("\nСоздаем вторую книгу и заполняем данные через метод 'записи'.") # Сообщение для пользователя на русском

    # Создаем объект (с минимальными корректными данными) для последующего ввода данных
    try:
        book2 = Book("Временное название", "Временный автор", 1) # Инициализируем корректными данными

        # Используем метод "записи" для ввода данных с клавиатуры
        book2.input_data()

        # Используем метод "чтения" для показа введенных данных
        book2.display_info()

    except ValueError as e:
        # Это исключение из __init__ если бы мы пытались создать книгу с некорректным числом страниц изначально
        # Или ошибка при вводе числа страниц в input_data
        print(f"Ошибка при работе со второй книгой: {e}") # Сообщение об ошибке на русском
    except Exception as e:
        # Обработка любых других непредвиденных ошибок
        print(f"Произошла непредвиденная ошибка: {e}") # Сообщение об ошибке на русском